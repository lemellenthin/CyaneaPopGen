%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.7
%%CreationDate: Thu Feb  1 22:25:40 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGGAGUUAAGUUAAUGAAAACUAAUUGCCUUCAAAGCUAUUAAUAUUGGUUCAAAUCCAAUACUCCCUG\
) def
/coor [
[111.74188995 224.55641174]
[111.07839203 209.57109070]
[110.41489410 194.58576965]
[109.75138855 179.60044861]
[109.08789062 164.61514282]
[108.42439270 149.62982178]
[107.76088715 134.64450073]
[91.45396423 132.63279724]
[78.62169647 123.76193237]
[71.75945282 110.68288422]
[56.85113525 112.33879089]
[41.94281769 113.99470520]
[27.03449821 115.65061188]
[17.35811806 128.14633179]
[1.66975057 130.05700684]
[-10.72297478 120.24906158]
[-12.46767330 104.54136658]
[-2.52924657 92.25302887]
[13.19601345 90.67449951]
[25.37858772 100.74229431]
[40.28690720 99.08638000]
[55.19522476 97.43047333]
[70.10354614 95.77456665]
[75.41677856 82.46952057]
[86.26482391 73.11138916]
[82.97325134 58.47699356]
[72.39624786 46.71104431]
[77.15210724 32.59611893]
[73.86052704 17.96172523]
[59.88557816 10.94497299]
[53.73793030 -3.43349719]
[58.32030869 -18.38461113]
[71.46906281 -26.84890938]
[86.97574615 -24.82981110]
[97.51857758 -13.28067017]
[98.11956024 2.34536099]
[88.49492645 14.67014790]
[91.78649902 29.30454254]
[102.12806702 40.02374268]
[97.60764313 55.18541718]
[100.89922333 69.81980896]
[111.78138733 71.04996490]
[121.86727142 76.20426178]
[129.74626160 84.85607910]
[134.21687317 96.07530212]
[134.46434021 108.52539825]
[149.43130493 109.52024078]
[164.39828491 110.51509094]
[179.36524963 111.50993347]
[194.33222961 112.50477600]
[205.02491760 101.09424591]
[220.55664062 99.27773285]
[233.59378052 107.91294861]
[237.98060608 122.92260742]
[231.64578247 137.21960449]
[217.58042908 144.05332947]
[202.42578125 140.19711304]
[193.33738708 127.47174835]
[178.37040710 126.47690582]
[163.40344238 125.48206329]
[148.43646240 124.48722076]
[133.46948242 123.49237061]
[122.74620819 133.98100281]
[123.40970612 148.96632385]
[124.07321167 163.95162964]
[124.73670959 178.93695068]
[125.40020752 193.92227173]
[126.06371307 208.90759277]
[126.72721100 223.89291382]
[129.76773071 243.03462219]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[10 23]
[11 22]
[12 21]
[13 20]
[25 41]
[26 40]
[28 38]
[29 37]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
